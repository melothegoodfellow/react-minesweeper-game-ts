{"version":3,"sources":["types/index.ts","components/NumberDisplay/index.tsx","utils/index.ts","constants/index.ts","components/Button/index.tsx","components/App/index.tsx","index.tsx"],"names":["CellValue","CellState","Smileys","NumberDisplay","value","className","toString","padStart","countBombs","cells","rowIndex","colIndex","adjacentCells","topLeftCell","topCenterCell","topRightCell","MAX_COLS","bottomLeftCell","MAX_ROWS","bottomCenterCell","bottomRightCell","leftCell","rightCell","getAdjacentCells","bombCount","Object","entries","adjacentCell","bomb","openBlankCells","cell","state","visible","none","generateCells","row","push","col","open","Button","onClick","onContextMenu","red","role","aria-label","flagged","renderContent","App","useState","setCells","grin","smiley","setSmiley","time","setTime","live","setLive","setBombCount","hasLost","setHasLost","hasWon","setHasWon","useEffect","mouseUpEvent","mouseDownEvent","shock","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","lost","won","cellClick","randomRow","Math","floor","random","randomCol","placeBombs","includes","newCells","openAllBombs","gameEnd","slice","map","cellContext","e","preventDefault","cellsCopy","cellIndex","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af0cd620.chunk.js","sourcesContent":["export enum CellValue {\n    none,\n    one,\n    two,\n    three,\n    four,\n    five,\n    six,\n    seven,\n    eight,\n    bomb,\n}\n\nexport enum CellState {\n    open,\n    visible,\n    flagged\n}\n\nexport enum Smileys {\n    grin = 'ðŸ˜ƒ',\n    shock = 'ðŸ˜¯',\n    lost = 'ðŸ˜ž',\n    won = 'ðŸ˜Ž'\n}\n\nexport type Cell = {\n    value: CellValue,\n    state: CellState,\n    red?: boolean\n}\n\nexport type Smiley = {\n\n}\n","import React from \"react\";\n\nimport \"./NumberDisplay.scss\";\n\ninterface NumberDisplayProps {\n    value: number;\n}\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\n    return (\n        <div className=\"NumberDisplay\">\n            {value.toString().padStart(3, '0')}\n        </div>\n    );\n}\n\nexport default NumberDisplay;","import { MAX_COLS, MAX_ROWS, NUMBER_OF_BOMBS } from '../constants';\nimport { CellValue, CellState, Cell } from '../types';\n\nconst getAdjacentCells = (cells: Cell[][], rowIndex: number, colIndex: number): {\n    topLeftCell: Cell | null,\n    topCenterCell: Cell | null,\n    topRightCell: Cell | null,\n    leftCell: Cell | null,\n    rightCell: Cell | null,\n    bottomLeftCell: Cell | null,\n    bottomCenterCell: Cell | null,\n    bottomRightCell: Cell | null,\n} => {\n    const max_rows = MAX_ROWS - 1;\n    const max_cols = MAX_COLS - 1;\n    const topLeftCell =\n        (rowIndex > 0 && colIndex > 0) ?\n            cells[rowIndex - 1][colIndex - 1] :\n            null;\n    const topCenterCell =\n        (rowIndex > 0) ?\n            cells[rowIndex - 1][colIndex] :\n            null;\n    const topRightCell =\n        (rowIndex > 0 && colIndex < max_cols) ?\n            cells[rowIndex - 1][colIndex + 1] :\n            null;\n    const bottomLeftCell =\n        (rowIndex < max_rows && colIndex > 0) ?\n            cells[rowIndex + 1][colIndex - 1] :\n            null;\n    const bottomCenterCell =\n        (rowIndex < max_rows) ?\n            cells[rowIndex + 1][colIndex] :\n            null;\n    const bottomRightCell =\n        (rowIndex < max_rows && colIndex < max_cols) ?\n            cells[rowIndex + 1][colIndex + 1] :\n            null;\n    const leftCell =\n        (colIndex > 0) ?\n            cells[rowIndex][colIndex - 1] :\n            null;\n    const rightCell =\n        (colIndex < max_cols) ?\n            cells[rowIndex][colIndex + 1] :\n            null;\n    return {\n        topLeftCell,\n        topCenterCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCenterCell,\n        bottomRightCell,\n    };\n}\n\nconst countBombs = (cells: Cell[][], rowIndex: number, colIndex: number): number => {\n    const adjacentCells = getAdjacentCells(cells, rowIndex, colIndex);\n    let bombCount = 0;\n    for (const [key, adjacentCell] of Object.entries(adjacentCells)) {\n        if (adjacentCell && adjacentCell.value === CellValue.bomb) {\n            bombCount++;\n        }\n    }\n    return bombCount;\n}\n\nexport const openBlankCells = (cells: Cell[][], rowIndex: number, colIndex: number) => {\n    const cell = cells[rowIndex][colIndex];\n    if (cell.state == CellState.visible)\n        return;\n    cells[rowIndex][colIndex].state = CellState.visible;\n    if (colIndex < MAX_COLS - 1 && cell.value === CellValue.none) {\n        openBlankCells(cells, rowIndex, colIndex + 1);\n    }\n    if (colIndex > 0 && cell.value === CellValue.none) {\n        openBlankCells(cells, rowIndex, colIndex - 1);\n    }\n    if (rowIndex < MAX_ROWS - 1 && cell.value === CellValue.none) {\n        openBlankCells(cells, rowIndex + 1, colIndex);\n    }\n    if (rowIndex > 0 && cell.value === CellValue.none) {\n        openBlankCells(cells, rowIndex - 1, colIndex);\n    }\n}\n\n//randomly added 10 bombs\nexport const placeBombs = (cells: Cell[][], rowIndex: number, colIndex: number) => {\n    let bombCount = 0;\n    let cell = {\n        value: CellValue.none,\n        state: CellState.open\n    }\n    while (bombCount < NUMBER_OF_BOMBS) {\n        const randomRow = Math.floor(Math.random() * MAX_ROWS);\n        const randomCol = Math.floor(Math.random() * MAX_COLS);\n        const position = (randomRow !== rowIndex && randomCol !== colIndex)\n                    && (randomRow !== rowIndex - 1 && randomCol !== colIndex - 1)\n                    && (randomRow !== rowIndex - 1 && randomCol !== colIndex)\n                    && (randomRow !== rowIndex - 1 && randomCol !== colIndex + 1)\n                    && (randomRow !== rowIndex && randomCol !== colIndex - 1)\n                    && (randomRow !== rowIndex && randomCol !== colIndex + 1)\n                    && (randomRow !== rowIndex + 1 && randomCol !== colIndex - 1)\n                    && (randomRow !== rowIndex + 1 && randomCol !== colIndex)\n                    && (randomRow !== rowIndex + 1 && randomCol !== colIndex + 1)\n        if (position) {\n            cell = cells[randomRow][randomCol];\n            if (cell.value !== CellValue.bomb) {\n                cell.value = CellValue.bomb;\n                bombCount++;\n            }\n        }\n    }\n\n    for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\n        for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\n            const cell = cells[rowIndex][colIndex];\n            if (cell.value !== CellValue.bomb) {\n                cell.value = countBombs(cells, rowIndex, colIndex);\n            }\n        }\n    }\n}\n\nexport const generateCells = (): Cell[][] => {\n    const cells: Cell[][] = [];\n\n    for (let row = 0; row < MAX_ROWS; row++) {\n        cells.push([]);\n        for (let col = 0; col < MAX_COLS; col++) {\n            cells[row].push({\n                value: CellValue.none,\n                state: CellState.open //TODO: change to open for playing game\n            });\n        }\n    }\n\n    return cells;\n}","export const MAX_ROWS = 10;\nexport const MAX_COLS = 10;\n\nexport const NUMBER_OF_BOMBS = 10;","import React from \"react\";\n\nimport \"./Button.scss\";\nimport { CellState, CellValue } from \"../../types\";\n\ninterface ButtonProps {\n    row: number;\n    col: number;\n    state: CellState;\n    value: CellValue;\n    red?: boolean;\n    onClick(rowIndex: number, colIndex: number): (...args: any[]) => void;\n    onContextMenu(rowIndex: number, colIndex: number): (...args: any[]) => void;\n}\n\nconst Button: React.FC<ButtonProps> = ({ row, col, onClick, onContextMenu, state, value, red }) => {\n    const renderContent = (): React.ReactNode => {\n        switch (state) {\n            case CellState.visible:\n                if (value === CellValue.bomb) {\n                    return (\n                        <span role=\"img\" aria-label=\"bomb\">ðŸ’£\n                        </span>\n                    );\n                }\n                else if (value === CellValue.none) {\n                    return;\n                }\n                else\n                    return (\n                        <span role=\"img\" aria-label=\"one\">{value}\n                        </span>\n                    );\n            case CellState.flagged:\n                return (\n                    <span role=\"img\" aria-label=\"red-flag\">ðŸš©\n                    </span>\n                );\n            default:\n                return null;\n        }\n    };\n\n    return (\n        <div\n            className={\n                `Button \n                    ${(state === CellState.visible) ? \"visible\" : \"\"} \n                    value-${value}\n                    ${(red) ? \"red\" : \"\"}\n                `\n            }\n            onClick={onClick(row, col)}\n            onContextMenu={onContextMenu(row, col)}>\n            {renderContent()}\n        </div>\n    );\n}\n\nexport default Button;","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.scss\";\nimport NumberDisplay from \"../NumberDisplay\";\nimport { generateCells, placeBombs, openBlankCells } from \"../../utils\";\nimport Button from \"../Button\";\nimport { Smileys, Cell, CellState, CellValue } from \"../../types\";\nimport { NUMBER_OF_BOMBS, MAX_COLS, MAX_ROWS } from \"../../constants\";\n\nconst App: React.FC = () => {\n\n    const [cells, setCells] = useState<Cell[][]>(generateCells);\n    const [smiley, setSmiley] = useState<Smileys>(Smileys.grin);\n    const [time, setTime] = useState<number>(0);\n    const [live, setLive] = useState<boolean>(false);\n    const [bombCount, setBombCount] = useState<number>(NUMBER_OF_BOMBS);\n    const [hasLost, setHasLost] = useState<boolean>(false);\n    const [hasWon, setHasWon] = useState<boolean>(false);\n\n    useEffect(() => {\n        const mouseUpEvent = () => {\n            setSmiley(Smileys.grin);\n        }\n\n        const mouseDownEvent = () => {\n            setSmiley(Smileys.shock);\n        }\n\n        window.addEventListener(\"mousedown\", mouseDownEvent);\n        window.addEventListener(\"mouseup\", mouseUpEvent);\n\n        return () => {\n            window.removeEventListener(\"mousedown\", mouseDownEvent);\n            window.removeEventListener(\"mouseup\", mouseUpEvent);\n        }\n    });\n\n    useEffect(() => {\n        if (live) {\n            const timer = setInterval(() => {\n                if (time === 999)\n                    return;\n                setTime(time + 1);\n            }, 1000);\n\n            return () => {\n                clearInterval(timer);\n            };\n        }\n\n    }, [live, time]);\n\n    useEffect(() => {\n        if (hasLost) {\n            setLive(false);\n            setSmiley(Smileys.lost);\n        }\n    }, [hasLost]);\n\n    useEffect(() => {\n        if (hasWon) {\n            setLive(false);\n            setSmiley(Smileys.won);\n        }\n    }, [hasWon]);\n\n    const cellClick = (rowIndex: number, colIndex: number) => (): void => {\n        const cell = cells[rowIndex][colIndex];\n        if (!live) {\n            //TODO: not click on bomb\n            setLive(true);\n            placeBombs(cells, rowIndex, colIndex);\n            openBlankCells(cells, rowIndex, colIndex);\n        }\n        if ([CellState.flagged, CellState.visible].includes(cell.state))\n            return;\n\n        switch (cell.value) {\n            case CellValue.bomb:\n                setHasLost(true);\n                //Open bombs\n                const newCells = openAllBombs();\n                //make cell red\n                newCells[rowIndex][colIndex].red = true;\n                setCells(newCells);\n                return;\n            case CellValue.none:\n                openBlankCells(cells, rowIndex, colIndex);\n                cells[rowIndex][colIndex].state = CellState.visible;\n                //TODO: Dont;\n                return;\n            default:\n                cells[rowIndex][colIndex].state = CellState.visible;\n                // setCells(cells);\n        }\n        let gameEnd = true;\n        for (let row = 0; row < MAX_ROWS; row++) {\n            for (let col = 0; col < MAX_COLS; col++) {\n                if (cells[row][col].value !== CellValue.bomb\n                    && cells[row][col].state === CellState.open) {\n                    gameEnd = false;\n                    break;\n                }\n            }\n        }\n        if(gameEnd)\n            setHasWon(true);\n    }\n\n    const openAllBombs = (): Cell[][] => {\n        const newCells = cells.slice();\n        return newCells.map((row) => {\n            return row.map((cell) => {\n                if (cell.value === CellValue.bomb) {\n                    return {\n                        value: cell.value,\n                        state: CellState.visible\n                    };\n                }\n                return cell;\n            });\n        });\n    }\n\n    const cellContext = (rowIndex: number, colIndex: number) => (e: React.MouseEvent<HTMLBodyElement, MouseEvent>): void => {\n        e.preventDefault();\n        if (!live)\n            return;\n        const cellsCopy = cells.slice();\n        const cell = cells[rowIndex][colIndex];\n        switch (cell.state) {\n            case CellState.visible:\n                return;\n            case CellState.open:\n                cellsCopy[rowIndex][colIndex].state = CellState.flagged;\n                setCells(cellsCopy);\n                setBombCount(bombCount - 1);\n                break;\n            case CellState.flagged:\n                cellsCopy[rowIndex][colIndex].state = CellState.open;\n                setCells(cellsCopy);\n                setBombCount(bombCount + 1);\n        }\n    }\n\n    const smileyClick = () => {\n        setLive(false);\n        setTime(0);\n        setCells(generateCells());\n        setBombCount(NUMBER_OF_BOMBS);\n        setHasLost(false);\n        setHasWon(false);\n    }\n\n    const renderCells = (): React.ReactNode => {\n        return cells.map((row, rowIndex) => {\n            return row.map((cell, cellIndex) => {\n                return <Button\n                    row={rowIndex}\n                    col={cellIndex}\n                    state={cell.state}\n                    value={cell.value}\n                    key={`${rowIndex}-${cellIndex}`}\n                    onClick={cellClick}\n                    onContextMenu={cellContext}\n                    red={cell.red}\n                >\n                </Button>;\n            });\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"Header\">\n                <NumberDisplay value={bombCount}></NumberDisplay>\n                <div className=\"Smiley\"\n                    onClick={smileyClick}>\n                    <span role=\"img\" aria-label=\"grin\">{smiley}</span>\n                </div>\n                <NumberDisplay value={time}></NumberDisplay>\n            </div>\n            <div className=\"Body\">\n                {renderCells()}\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from \"./components/App\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}